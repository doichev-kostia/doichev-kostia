---
import type { HTMLAttributes, HTMLTag } from "astro/types";
import { cva, VariantProps } from "class-variance-authority";
import { cx } from "@/utils/cx";

const buttonStyles = cva(
	"inline-flex cursor-pointer flex-shrink-0 flex-wrap items-center justify-center rounded-lg border-transparent text-center px-4 py-2 text-sm font-semibold transition duration-200 ease-in-out uppercase no-underline",
	{
		variants: {
			variant: {
				contained: "",
				outlined: "",
			},
			color: {
				primary: "",
			},
		},
		compoundVariants: [
			{
				variant: "contained",
				color: "primary",
				class: "bg-primary text-white hover:bg-primary-focused",
			},
			{
				variant: "outlined",
				color: "primary",
				class: "border-primary text-primary",
			},
		],
	}
);

export type Props<T extends HTMLTag = "button"> = Omit<HTMLAttributes<T>, "color"> &
	VariantProps<typeof buttonStyles> & {
		component?: HTMLTag;
	};

const { variant = "contained", color = "primary", className, component, ...props } = Astro.props;

const Tag = component || "button";
---

<Tag class={cx(buttonStyles({ variant, color, className }))} {...props}>
	<slot />
</Tag>
